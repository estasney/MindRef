#:import seps widgets.separator
#:import style widgets.style

<PrimaryVSep@VSeparator>:
    color: app.colors['Primary']
    width: dp(2)

<PrimaryHSep@HSeparator>:
    color: app.colors['Primary']
    height: dp(2)

<-ThemedButton>:
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    disabled_image: self.background_disabled
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    border_size: dp(8)
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)

    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border_size
            pos: self.pos
            size: self.size
            source: self.state_image if not self.disabled else self.disabled_image

<-ThemedLabelButton>:
    text: ''
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    disabled_image: self.background_disabled
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    border_size: dp(8)
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)
    size_hint_y: None
    height: self.minimum_height
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border_size
            pos: self.pos
            size: self.size
            source: self.state_image if not root.disabled else self.disabled_image
    BaseLabel:
        text: root.text
        size_hint_y: None
        height: self.texture_size[1] * 2

<-IconButton>:
    icon_code: ''
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    disabled_image: self.background_disabled
    icon_size: app.base_font_size + sp(10)
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)
    size_hint_y: None
    height: self.minimum_height
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border_size
            pos: self.pos
            size: self.size
            source: self.state_image if not root.disabled else self.disabled_image
    IconLabel:
        icon_code: root.icon_code
        font_size: root.icon_size
        text_size: self.texture_size
        size: self.texture_size
        size_hint: None, None

<XButton@IconButton>:
    icon_code: '\ue5cd'
    border_size: [sp(1.5) * 4]
    pos_hint: {"x": 1}
    size_hint_x: None
    size: self.minimum_size
    spacing: dp(1)
    padding: dp(4)
    on_release: app.menu_open = not app.menu_open

<-ImageButton>:
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)

    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  [dp(8), dp(8), dp(8), dp(8)]
            pos: self.pos
            size: self.size
            source: root.state_image if not root.disabled else root.background_disabled

    Image:
        mipmap: True
        source: root.source



<SaveButton>:
    padding: dp(10)


<HamburgerIcon>:
    orientation: 'horizontal'
    size_hint_x: None
    width: self.height*1.618

    Button:
        id: btn
        background_color: [0,0,0,0]
        on_release: root.release_callback()
        canvas:
            Color:
                rgba: app.colors['White']
            RoundedRectangle:
                pos: (self.x + self.center_x) / 2, self.center_y
                size: self.width/2, dp(2)
                radius: dp(2),dp(2)
            RoundedRectangle:
                pos: ((self.x + self.center_x)/2, self.center_y - self.height/5)
                size: self.width/2, dp(2)
                radius: dp(2),dp(2)
            RoundedRectangle:
                pos: ((self.x + self.center_x)/2, self.center_y + self.height/5)
                size: self.width/2, dp(2)
                radius: dp(2), dp(2)

