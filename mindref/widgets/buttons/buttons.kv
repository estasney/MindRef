#:import seps widgets.separator
#:import style widgets.style

<PrimaryVSep@VSeparator>:
    color: app.colors['Primary']
    width: dp(2)

<PrimaryHSep@HSeparator>:
    color: app.colors['Primary']
    height: dp(2)

<-ThemedButton>:
    background_normal: app.atlas_service.uri_for("bg_normal", atlas_name="textures") if max(self.border) > 0 else app.atlas_service.uri_for("bg_normal_nb", atlas_name="textures")
    background_down: app.atlas_service.uri_for("bg_down", atlas_name="textures") if max(self.border) > 0 else app.atlas_service.uri_for("bg_down_nb", atlas_name="textures")
    background_disabled: app.atlas_service.uri_for("bg_disabled", atlas_name="textures") if max(self.border) > 0 else app.atlas_service.uri_for("bg_disabled_nb", atlas_name="textures")
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    disabled_image: self.background_disabled
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    orientation: 'vertical'
    border: dp(8)
    padding: dp(5)
    spacing: dp(2)
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border
            pos: self.pos
            size: self.size
            source: self.state_image if not self.disabled else self.disabled_image

<ThemedLabelButton>:
    text: ''

    size_hint_y: None
    height: self.minimum_height
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border
            pos: self.pos
            size: self.size
            source: self.state_image if not root.disabled else self.disabled_image
    BaseLabel:
        text: root.text
        size_hint_y: None
        height: self.texture_size[1] * 2

<ThemedIconButton>:
    icon_code: ''
    icon_size: app.base_font_size + sp(10)
    orientation: 'vertical'
    size_hint_y: None
    height: self.minimum_height
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  self.border
            pos: self.pos
            size: self.size
            source: self.state_image if not root.disabled else self.disabled_image
    IconLabel:
        id: icon
        icon_code: root.icon_code
        font_size: root.icon_size
        text_size: self.size
        size: self.texture_size
        valign: 'middle'
        halign: 'center'
        size_hint: None, None
        pos_hint: {"center_x": .5, "center_y": .5}

<XButton@ThemedIconButton>:
    icon_code: '\ue5cd'
    border: sp(2)
    pos_hint: {"x": 1}
    size_hint_x: None
    size: self.minimum_size
    spacing: dp(1)
    padding: [sp(6), sp(2), sp(6), sp(2)]
    on_release: app.menu_open = not app.menu_open

<-ImageButton>:
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)

    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  [dp(8), dp(8), dp(8), dp(8)]
            pos: self.pos
            size: self.size
            source: root.state_image if not root.disabled else root.background_disabled

    Image:
        mipmap: True
        source: root.source



<SaveButton>:
    padding: dp(10)


<OpenMenuButton@ThemedIconButton>:
    icon_code: '\ue5d2'
    icon_size: app.base_font_size + sp(10)
    border: 0
#    orientation: 'horizontal'
#    size_hint_x: None
#    width: self.height*1.618
#
#    Button:
#        id: btn
#        background_color: [0,0,0,0]
#        on_release: root.release_callback()
#        canvas:
#            Color:
#                rgba: app.colors['White']
#            RoundedRectangle:
#                pos: (self.x + self.center_x) / 2, self.center_y
#                size: self.width/2, dp(2)
#                radius: dp(2),dp(2)
#            RoundedRectangle:
#                pos: ((self.x + self.center_x)/2, self.center_y - self.height/5)
#                size: self.width/2, dp(2)
#                radius: dp(2),dp(2)
#            RoundedRectangle:
#                pos: ((self.x + self.center_x)/2, self.center_y + self.height/5)
#                size: self.width/2, dp(2)
#                radius: dp(2), dp(2)
#
