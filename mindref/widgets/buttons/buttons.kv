#:import seps widgets.separator

<PrimaryVSep@VSeparator>:
    color: app.colors['Primary']
    width: dp(2)

<PrimaryHSep@HSeparator>:
    color: app.colors['Primary']
    height: dp(2)

<-TexturedButton>:
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    border_size: dp(8)
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)

    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  root.border_size
            pos: self.pos
            size: self.size
            source: self.state_image

<-TexturedLabelButton>:
    text: ''
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    border_size: dp(8)
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)
    size_hint_y: None
    height: self.minimum_height
    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  root.border_size
            pos: self.pos
            size: self.size
            source: self.state_image
    BaseLabel:
        text: root.text
        size_hint_y: None
        height: self.texture_size[1] * 2


<-ImageButton>:
    state_image: self.background_normal if self.state == 'normal' else self.background_down
    background_color: app.colors['Primary'] if self.state == 'normal' else app.colors['Accent-One']
    orientation: 'vertical'
    padding: dp(5)
    spacing: dp(2)

    canvas:
        Color:
            rgba: self.background_color
        BorderImage:
            border:  [dp(8), dp(8), dp(8), dp(8)]
            pos: self.pos
            size: self.size
            source: self.state_image

    Image:
        mipmap: True
        source: root.source

<SaveButton>:
    padding: dp(10)


<HamburgerIcon>:
    orientation: 'horizontal'
    size_hint_x: None
    width: self.height*1.618

    Button:
        id: btn
        background_color: [0,0,0,0]
        on_release: root.release_callback()
        canvas:
            Color:
                rgba: app.colors['White']
            RoundedRectangle:
                pos: (self.x + self.center_x) / 2, self.center_y
                size: self.width/2, dp(2)
                radius: dp(2),dp(2)
            RoundedRectangle:
                pos: ((self.x + self.center_x)/2, self.center_y - self.height/5)
                size: self.width/2, dp(2)
                radius: dp(2),dp(2)
            RoundedRectangle:
                pos: ((self.x + self.center_x)/2, self.center_y + self.height/5)
                size: self.width/2, dp(2)
                radius: dp(2), dp(2)
<XButton@BoxLayout>:
    btn: btn
    orientation: 'horizontal'
    size_hint_min_y: 1
    size_hint_x: None
    height: btn.texture_size[1] + dp(4)
    width: self.height * 2
    Button:
        id: btn
        text: 'X'
        font_size: app.base_font_size + sp(8)
        halign: 'center'
        valign: 'center'
        padding_x: dp(4)
        on_release: app.menu_open = not app.menu_open
